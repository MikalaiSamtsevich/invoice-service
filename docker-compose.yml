services:
  order-service:
    image: order-service:0.0.6-SNAPSHOT
    environment:
      OTEL_SERVICE_NAME: "order-service"
      OTEL_RESOURCE_ATTRIBUTES: "service=order-service,env=dev"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://collector:4317"
      # Logs are disabled by default
      OTEL_LOGS_EXPORTER: "otlp"
      POSTGRES_APP_HOST: "postgres"
    ports:
      - "8085:8085"
    depends_on:
      - collector
      - postgres

#  invoice-service:
#    image: invoice-service:0.0.1-SNAPSHOT
#    ports:
#      - "8086:8086"
#    depends_on:
#      - collector
#      - postgres

  collector:
    container_name: collector
    image: otel/opentelemetry-collector-contrib:0.91.0
    command:
      - --config=/etc/otelcol-contrib/otel-collector.yml
    volumes:
      - ./observer-config/otel-collector.yml:/etc/otelcol-contrib/otel-collector.yml
    restart: always
    ports:
      - "4317:4317" # OTLP gRPC receiver
#      - "4318:4318" # OTLP httpreceiver
      - "8889"
    depends_on:
      - loki
      - zipkin-all-in-one
      - tempo
      - jaeger-all-in-one

  loki:
    container_name: loki
    image: grafana/loki:latest
    command: -config.file=/etc/loki/local-config.yaml
    restart: always
    ports:
      - "3100"

  tempo:
    container_name: tempo
    image: grafana/tempo:latest
    command: [ "-config.file=/etc/tempo.yml" ]
    volumes:
      - ./observer-config/tempo.yml:/etc/tempo.yml
    restart: always
    ports:
      - "4317"  # otlp grpc
      - "3200"  # tempo as grafana datasource

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    volumes:
      - ./observer-config/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --enable-feature=exemplar-storage
      - --web.enable-remote-write-receiver
    restart: always
    ports:
      - '9090:9090'
    depends_on:
      - collector

  grafana:
    container_name: grafana
    image: grafana/grafana
    volumes:
      - ./observer-config/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    restart: always
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
      - loki
      - jaeger-all-in-one
      - zipkin-all-in-one
      - tempo

  jaeger-all-in-one:
    container_name: jaeger
    image: jaegertracing/all-in-one:latest
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    restart: always
    ports:
      - "16686:16686"
      - "4317"

  postgres:
    container_name: postgres
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_DB: opentelemetry
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: root
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  zipkin-all-in-one:
    container_name: zipkin
    image: openzipkin/zipkin:latest
    restart: always
    ports:
      - "9411:9411"

  kafka:
    container_name: kafka
    image: docker.io/bitnami/kafka:3.6
    restart: always
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=CONTROLLER://:9093,INTERNAL://:9092,EXTERNAL://:29092
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka:9092,EXTERNAL://localhost:29092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
    ports:
      - "29092:29092"

  kafka-ui:
    container_name: kafka-ui
    restart: always
    image: ghcr.io/kafbat/kafka-ui
    ports:
      - 9096:8080
    depends_on:
      - kafka
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS=kafka:9092

volumes:
  postgres-data: